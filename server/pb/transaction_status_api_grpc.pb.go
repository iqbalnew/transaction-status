// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: transaction_status_api.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TransactionStatusService_HealthCheck_FullMethodName                   = "/transaction_status.service.v1.TransactionStatusService/HealthCheck"
	TransactionStatusService_RegisterJobTransactionPending_FullMethodName = "/transaction_status.service.v1.TransactionStatusService/RegisterJobTransactionPending"
	TransactionStatusService_UpdatedJobTransactionStatus_FullMethodName   = "/transaction_status.service.v1.TransactionStatusService/UpdatedJobTransactionStatus"
)

// TransactionStatusServiceClient is the client API for TransactionStatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionStatusServiceClient interface {
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// "this is for register job for queue to rabbit
	RegisterJobTransactionPending(ctx context.Context, in *RegisterJobTransactionPendingeRequest, opts ...grpc.CallOption) (*RegisterJobTransactionPendingResponse, error)
	UpdatedJobTransactionStatus(ctx context.Context, in *UpdatedJobTransactionStatusRequest, opts ...grpc.CallOption) (*UpdatedJobTransactionStatusResponse, error)
}

type transactionStatusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionStatusServiceClient(cc grpc.ClientConnInterface) TransactionStatusServiceClient {
	return &transactionStatusServiceClient{cc}
}

func (c *transactionStatusServiceClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, TransactionStatusService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionStatusServiceClient) RegisterJobTransactionPending(ctx context.Context, in *RegisterJobTransactionPendingeRequest, opts ...grpc.CallOption) (*RegisterJobTransactionPendingResponse, error) {
	out := new(RegisterJobTransactionPendingResponse)
	err := c.cc.Invoke(ctx, TransactionStatusService_RegisterJobTransactionPending_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionStatusServiceClient) UpdatedJobTransactionStatus(ctx context.Context, in *UpdatedJobTransactionStatusRequest, opts ...grpc.CallOption) (*UpdatedJobTransactionStatusResponse, error) {
	out := new(UpdatedJobTransactionStatusResponse)
	err := c.cc.Invoke(ctx, TransactionStatusService_UpdatedJobTransactionStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionStatusServiceServer is the server API for TransactionStatusService service.
// All implementations must embed UnimplementedTransactionStatusServiceServer
// for forward compatibility
type TransactionStatusServiceServer interface {
	HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckResponse, error)
	// "this is for register job for queue to rabbit
	RegisterJobTransactionPending(context.Context, *RegisterJobTransactionPendingeRequest) (*RegisterJobTransactionPendingResponse, error)
	UpdatedJobTransactionStatus(context.Context, *UpdatedJobTransactionStatusRequest) (*UpdatedJobTransactionStatusResponse, error)
	mustEmbedUnimplementedTransactionStatusServiceServer()
}

// UnimplementedTransactionStatusServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionStatusServiceServer struct {
}

func (UnimplementedTransactionStatusServiceServer) HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedTransactionStatusServiceServer) RegisterJobTransactionPending(context.Context, *RegisterJobTransactionPendingeRequest) (*RegisterJobTransactionPendingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterJobTransactionPending not implemented")
}
func (UnimplementedTransactionStatusServiceServer) UpdatedJobTransactionStatus(context.Context, *UpdatedJobTransactionStatusRequest) (*UpdatedJobTransactionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatedJobTransactionStatus not implemented")
}
func (UnimplementedTransactionStatusServiceServer) mustEmbedUnimplementedTransactionStatusServiceServer() {
}

// UnsafeTransactionStatusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionStatusServiceServer will
// result in compilation errors.
type UnsafeTransactionStatusServiceServer interface {
	mustEmbedUnimplementedTransactionStatusServiceServer()
}

func RegisterTransactionStatusServiceServer(s grpc.ServiceRegistrar, srv TransactionStatusServiceServer) {
	s.RegisterService(&TransactionStatusService_ServiceDesc, srv)
}

func _TransactionStatusService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionStatusServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionStatusService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionStatusServiceServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionStatusService_RegisterJobTransactionPending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterJobTransactionPendingeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionStatusServiceServer).RegisterJobTransactionPending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionStatusService_RegisterJobTransactionPending_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionStatusServiceServer).RegisterJobTransactionPending(ctx, req.(*RegisterJobTransactionPendingeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionStatusService_UpdatedJobTransactionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatedJobTransactionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionStatusServiceServer).UpdatedJobTransactionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionStatusService_UpdatedJobTransactionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionStatusServiceServer).UpdatedJobTransactionStatus(ctx, req.(*UpdatedJobTransactionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionStatusService_ServiceDesc is the grpc.ServiceDesc for TransactionStatusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionStatusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transaction_status.service.v1.TransactionStatusService",
	HandlerType: (*TransactionStatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _TransactionStatusService_HealthCheck_Handler,
		},
		{
			MethodName: "RegisterJobTransactionPending",
			Handler:    _TransactionStatusService_RegisterJobTransactionPending_Handler,
		},
		{
			MethodName: "UpdatedJobTransactionStatus",
			Handler:    _TransactionStatusService_UpdatedJobTransactionStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transaction_status_api.proto",
}
