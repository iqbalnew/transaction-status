package pb

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm "github.com/jinzhu/gorm"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	strings "strings"
	time "time"
)

type TemplatesORM struct {
	CompanyId         uint64
	CompanyName       string
	CreatedBy         string
	CreatedDt         *time.Time
	ProcessId         string
	RawUserData       string
	StatusDescription string
	StatusId          int32
	TemplateId        uint64
	UpdatedBy         string
	UpdatedDt         *time.Time
}

// TableName overrides the default tablename generated by GORM
func (TemplatesORM) TableName() string {
	return "templates"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Templates) ToORM(ctx context.Context) (TemplatesORM, error) {
	to := TemplatesORM{}
	var err error
	if prehook, ok := interface{}(m).(TemplatesWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.TemplateId = m.TemplateId
	to.ProcessId = m.ProcessId
	to.CompanyId = m.CompanyId
	to.CompanyName = m.CompanyName
	to.StatusId = int32(m.StatusId)
	to.StatusDescription = m.StatusDescription
	to.RawUserData = m.RawUserData
	to.CreatedBy = m.CreatedBy
	if m.CreatedDt != nil {
		t := m.CreatedDt.AsTime()
		to.CreatedDt = &t
	}
	to.UpdatedBy = m.UpdatedBy
	if m.UpdatedDt != nil {
		t := m.UpdatedDt.AsTime()
		to.UpdatedDt = &t
	}
	if posthook, ok := interface{}(m).(TemplatesWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *TemplatesORM) ToPB(ctx context.Context) (Templates, error) {
	to := Templates{}
	var err error
	if prehook, ok := interface{}(m).(TemplatesWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.TemplateId = m.TemplateId
	to.ProcessId = m.ProcessId
	to.CompanyId = m.CompanyId
	to.CompanyName = m.CompanyName
	to.StatusId = Status(m.StatusId)
	to.StatusDescription = m.StatusDescription
	to.RawUserData = m.RawUserData
	to.CreatedBy = m.CreatedBy
	if m.CreatedDt != nil {
		to.CreatedDt = timestamppb.New(*m.CreatedDt)
	}
	to.UpdatedBy = m.UpdatedBy
	if m.UpdatedDt != nil {
		to.UpdatedDt = timestamppb.New(*m.UpdatedDt)
	}
	if posthook, ok := interface{}(m).(TemplatesWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Templates the arg will be the target, the caller the one being converted from

// TemplatesBeforeToORM called before default ToORM code
type TemplatesWithBeforeToORM interface {
	BeforeToORM(context.Context, *TemplatesORM) error
}

// TemplatesAfterToORM called after default ToORM code
type TemplatesWithAfterToORM interface {
	AfterToORM(context.Context, *TemplatesORM) error
}

// TemplatesBeforeToPB called before default ToPB code
type TemplatesWithBeforeToPB interface {
	BeforeToPB(context.Context, *Templates) error
}

// TemplatesAfterToPB called after default ToPB code
type TemplatesWithAfterToPB interface {
	AfterToPB(context.Context, *Templates) error
}

type JobTransactionStatusPendingORM struct {
	CreatedAt *time.Time
	Id        uint64
	Status    int32
	TaskId    uint64
	Type      string
	UpdatedAt *time.Time
}

// TableName overrides the default tablename generated by GORM
func (JobTransactionStatusPendingORM) TableName() string {
	return "job_transaction_pending"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *JobTransactionStatusPending) ToORM(ctx context.Context) (JobTransactionStatusPendingORM, error) {
	to := JobTransactionStatusPendingORM{}
	var err error
	if prehook, ok := interface{}(m).(JobTransactionStatusPendingWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.TaskId = m.TaskId
	to.Status = int32(m.Status)
	to.Type = m.Type
	if m.CreatedAt != nil {
		t := m.CreatedAt.AsTime()
		to.CreatedAt = &t
	}
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if posthook, ok := interface{}(m).(JobTransactionStatusPendingWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *JobTransactionStatusPendingORM) ToPB(ctx context.Context) (JobTransactionStatusPending, error) {
	to := JobTransactionStatusPending{}
	var err error
	if prehook, ok := interface{}(m).(JobTransactionStatusPendingWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.TaskId = m.TaskId
	to.Status = StatusInquiryJob(m.Status)
	to.Type = m.Type
	if m.CreatedAt != nil {
		to.CreatedAt = timestamppb.New(*m.CreatedAt)
	}
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if posthook, ok := interface{}(m).(JobTransactionStatusPendingWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type JobTransactionStatusPending the arg will be the target, the caller the one being converted from

// JobTransactionStatusPendingBeforeToORM called before default ToORM code
type JobTransactionStatusPendingWithBeforeToORM interface {
	BeforeToORM(context.Context, *JobTransactionStatusPendingORM) error
}

// JobTransactionStatusPendingAfterToORM called after default ToORM code
type JobTransactionStatusPendingWithAfterToORM interface {
	AfterToORM(context.Context, *JobTransactionStatusPendingORM) error
}

// JobTransactionStatusPendingBeforeToPB called before default ToPB code
type JobTransactionStatusPendingWithBeforeToPB interface {
	BeforeToPB(context.Context, *JobTransactionStatusPending) error
}

// JobTransactionStatusPendingAfterToPB called after default ToPB code
type JobTransactionStatusPendingWithAfterToPB interface {
	AfterToPB(context.Context, *JobTransactionStatusPending) error
}

type TransactionPendingORM struct {
	Id        uint64
	Status    string
	TaskId    uint64
	Type      string
	UpdatedAt *time.Time
}

// TableName overrides the default tablename generated by GORM
func (TransactionPendingORM) TableName() string {
	return "transaction_pending"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *TransactionPending) ToORM(ctx context.Context) (TransactionPendingORM, error) {
	to := TransactionPendingORM{}
	var err error
	if prehook, ok := interface{}(m).(TransactionPendingWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.TaskId = m.TaskId
	to.Type = m.Type
	to.Status = m.Status
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if posthook, ok := interface{}(m).(TransactionPendingWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *TransactionPendingORM) ToPB(ctx context.Context) (TransactionPending, error) {
	to := TransactionPending{}
	var err error
	if prehook, ok := interface{}(m).(TransactionPendingWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.TaskId = m.TaskId
	to.Type = m.Type
	to.Status = m.Status
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if posthook, ok := interface{}(m).(TransactionPendingWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type TransactionPending the arg will be the target, the caller the one being converted from

// TransactionPendingBeforeToORM called before default ToORM code
type TransactionPendingWithBeforeToORM interface {
	BeforeToORM(context.Context, *TransactionPendingORM) error
}

// TransactionPendingAfterToORM called after default ToORM code
type TransactionPendingWithAfterToORM interface {
	AfterToORM(context.Context, *TransactionPendingORM) error
}

// TransactionPendingBeforeToPB called before default ToPB code
type TransactionPendingWithBeforeToPB interface {
	BeforeToPB(context.Context, *TransactionPending) error
}

// TransactionPendingAfterToPB called after default ToPB code
type TransactionPendingWithAfterToPB interface {
	AfterToPB(context.Context, *TransactionPending) error
}

// DefaultCreateTemplates executes a basic gorm create call
func DefaultCreateTemplates(ctx context.Context, in *Templates, db *gorm.DB) (*Templates, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TemplatesORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TemplatesORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type TemplatesORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TemplatesORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

// DefaultApplyFieldMaskTemplates patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskTemplates(ctx context.Context, patchee *Templates, patcher *Templates, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Templates, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedDt bool
	var updatedUpdatedDt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"TemplateId" {
			patchee.TemplateId = patcher.TemplateId
			continue
		}
		if f == prefix+"ProcessId" {
			patchee.ProcessId = patcher.ProcessId
			continue
		}
		if f == prefix+"CompanyId" {
			patchee.CompanyId = patcher.CompanyId
			continue
		}
		if f == prefix+"CompanyName" {
			patchee.CompanyName = patcher.CompanyName
			continue
		}
		if f == prefix+"StatusId" {
			patchee.StatusId = patcher.StatusId
			continue
		}
		if f == prefix+"StatusDescription" {
			patchee.StatusDescription = patcher.StatusDescription
			continue
		}
		if f == prefix+"RawUserData" {
			patchee.RawUserData = patcher.RawUserData
			continue
		}
		if f == prefix+"CreatedBy" {
			patchee.CreatedBy = patcher.CreatedBy
			continue
		}
		if !updatedCreatedDt && strings.HasPrefix(f, prefix+"CreatedDt.") {
			if patcher.CreatedDt == nil {
				patchee.CreatedDt = nil
				continue
			}
			if patchee.CreatedDt == nil {
				patchee.CreatedDt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedDt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedDt, patchee.CreatedDt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedDt" {
			updatedCreatedDt = true
			patchee.CreatedDt = patcher.CreatedDt
			continue
		}
		if f == prefix+"UpdatedBy" {
			patchee.UpdatedBy = patcher.UpdatedBy
			continue
		}
		if !updatedUpdatedDt && strings.HasPrefix(f, prefix+"UpdatedDt.") {
			if patcher.UpdatedDt == nil {
				patchee.UpdatedDt = nil
				continue
			}
			if patchee.UpdatedDt == nil {
				patchee.UpdatedDt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedDt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedDt, patchee.UpdatedDt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedDt" {
			updatedUpdatedDt = true
			patchee.UpdatedDt = patcher.UpdatedDt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListTemplates executes a gorm list call
func DefaultListTemplates(ctx context.Context, db *gorm.DB) ([]*Templates, error) {
	in := Templates{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TemplatesORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &TemplatesORM{}, &Templates{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TemplatesORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	ormResponse := []TemplatesORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TemplatesORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Templates{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type TemplatesORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TemplatesORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TemplatesORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]TemplatesORM) error
}

// DefaultCreateJobTransactionStatusPending executes a basic gorm create call
func DefaultCreateJobTransactionStatusPending(ctx context.Context, in *JobTransactionStatusPending, db *gorm.DB) (*JobTransactionStatusPending, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(JobTransactionStatusPendingORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(JobTransactionStatusPendingORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type JobTransactionStatusPendingORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type JobTransactionStatusPendingORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadJobTransactionStatusPending(ctx context.Context, in *JobTransactionStatusPending, db *gorm.DB) (*JobTransactionStatusPending, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(JobTransactionStatusPendingORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &JobTransactionStatusPendingORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(JobTransactionStatusPendingORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := JobTransactionStatusPendingORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(JobTransactionStatusPendingORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type JobTransactionStatusPendingORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type JobTransactionStatusPendingORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type JobTransactionStatusPendingORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteJobTransactionStatusPending(ctx context.Context, in *JobTransactionStatusPending, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(JobTransactionStatusPendingORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&JobTransactionStatusPendingORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(JobTransactionStatusPendingORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type JobTransactionStatusPendingORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type JobTransactionStatusPendingORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteJobTransactionStatusPendingSet(ctx context.Context, in []*JobTransactionStatusPending, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&JobTransactionStatusPendingORM{})).(JobTransactionStatusPendingORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&JobTransactionStatusPendingORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&JobTransactionStatusPendingORM{})).(JobTransactionStatusPendingORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type JobTransactionStatusPendingORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*JobTransactionStatusPending, *gorm.DB) (*gorm.DB, error)
}
type JobTransactionStatusPendingORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*JobTransactionStatusPending, *gorm.DB) error
}

// DefaultStrictUpdateJobTransactionStatusPending clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateJobTransactionStatusPending(ctx context.Context, in *JobTransactionStatusPending, db *gorm.DB) (*JobTransactionStatusPending, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateJobTransactionStatusPending")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &JobTransactionStatusPendingORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(JobTransactionStatusPendingORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(JobTransactionStatusPendingORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(JobTransactionStatusPendingORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type JobTransactionStatusPendingORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type JobTransactionStatusPendingORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type JobTransactionStatusPendingORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchJobTransactionStatusPending executes a basic gorm update call with patch behavior
func DefaultPatchJobTransactionStatusPending(ctx context.Context, in *JobTransactionStatusPending, updateMask *field_mask.FieldMask, db *gorm.DB) (*JobTransactionStatusPending, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj JobTransactionStatusPending
	var err error
	if hook, ok := interface{}(&pbObj).(JobTransactionStatusPendingWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadJobTransactionStatusPending(ctx, &JobTransactionStatusPending{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(JobTransactionStatusPendingWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskJobTransactionStatusPending(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(JobTransactionStatusPendingWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateJobTransactionStatusPending(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(JobTransactionStatusPendingWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type JobTransactionStatusPendingWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *JobTransactionStatusPending, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type JobTransactionStatusPendingWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *JobTransactionStatusPending, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type JobTransactionStatusPendingWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *JobTransactionStatusPending, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type JobTransactionStatusPendingWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *JobTransactionStatusPending, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetJobTransactionStatusPending executes a bulk gorm update call with patch behavior
func DefaultPatchSetJobTransactionStatusPending(ctx context.Context, objects []*JobTransactionStatusPending, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*JobTransactionStatusPending, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*JobTransactionStatusPending, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchJobTransactionStatusPending(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskJobTransactionStatusPending patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskJobTransactionStatusPending(ctx context.Context, patchee *JobTransactionStatusPending, patcher *JobTransactionStatusPending, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*JobTransactionStatusPending, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCreatedAt bool
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"TaskId" {
			patchee.TaskId = patcher.TaskId
			continue
		}
		if f == prefix+"Status" {
			patchee.Status = patcher.Status
			continue
		}
		if f == prefix+"Type" {
			patchee.Type = patcher.Type
			continue
		}
		if !updatedCreatedAt && strings.HasPrefix(f, prefix+"CreatedAt.") {
			if patcher.CreatedAt == nil {
				patchee.CreatedAt = nil
				continue
			}
			if patchee.CreatedAt == nil {
				patchee.CreatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"CreatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.CreatedAt, patchee.CreatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"CreatedAt" {
			updatedCreatedAt = true
			patchee.CreatedAt = patcher.CreatedAt
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListJobTransactionStatusPending executes a gorm list call
func DefaultListJobTransactionStatusPending(ctx context.Context, db *gorm.DB) ([]*JobTransactionStatusPending, error) {
	in := JobTransactionStatusPending{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(JobTransactionStatusPendingORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &JobTransactionStatusPendingORM{}, &JobTransactionStatusPending{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(JobTransactionStatusPendingORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []JobTransactionStatusPendingORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(JobTransactionStatusPendingORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*JobTransactionStatusPending{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type JobTransactionStatusPendingORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type JobTransactionStatusPendingORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type JobTransactionStatusPendingORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]JobTransactionStatusPendingORM) error
}

// DefaultCreateTransactionPending executes a basic gorm create call
func DefaultCreateTransactionPending(ctx context.Context, in *TransactionPending, db *gorm.DB) (*TransactionPending, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TransactionPendingORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TransactionPendingORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type TransactionPendingORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TransactionPendingORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadTransactionPending(ctx context.Context, in *TransactionPending, db *gorm.DB) (*TransactionPending, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TransactionPendingORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &TransactionPendingORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TransactionPendingORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := TransactionPendingORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(TransactionPendingORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type TransactionPendingORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TransactionPendingORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TransactionPendingORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteTransactionPending(ctx context.Context, in *TransactionPending, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TransactionPendingORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&TransactionPendingORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(TransactionPendingORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type TransactionPendingORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TransactionPendingORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteTransactionPendingSet(ctx context.Context, in []*TransactionPending, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&TransactionPendingORM{})).(TransactionPendingORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&TransactionPendingORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&TransactionPendingORM{})).(TransactionPendingORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type TransactionPendingORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*TransactionPending, *gorm.DB) (*gorm.DB, error)
}
type TransactionPendingORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*TransactionPending, *gorm.DB) error
}

// DefaultStrictUpdateTransactionPending clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateTransactionPending(ctx context.Context, in *TransactionPending, db *gorm.DB) (*TransactionPending, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateTransactionPending")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &TransactionPendingORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(TransactionPendingORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(TransactionPendingORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TransactionPendingORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type TransactionPendingORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TransactionPendingORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TransactionPendingORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchTransactionPending executes a basic gorm update call with patch behavior
func DefaultPatchTransactionPending(ctx context.Context, in *TransactionPending, updateMask *field_mask.FieldMask, db *gorm.DB) (*TransactionPending, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj TransactionPending
	var err error
	if hook, ok := interface{}(&pbObj).(TransactionPendingWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadTransactionPending(ctx, &TransactionPending{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(TransactionPendingWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskTransactionPending(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(TransactionPendingWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateTransactionPending(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(TransactionPendingWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type TransactionPendingWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *TransactionPending, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TransactionPendingWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *TransactionPending, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TransactionPendingWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *TransactionPending, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type TransactionPendingWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *TransactionPending, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetTransactionPending executes a bulk gorm update call with patch behavior
func DefaultPatchSetTransactionPending(ctx context.Context, objects []*TransactionPending, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*TransactionPending, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*TransactionPending, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchTransactionPending(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskTransactionPending patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskTransactionPending(ctx context.Context, patchee *TransactionPending, patcher *TransactionPending, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*TransactionPending, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"TaskId" {
			patchee.TaskId = patcher.TaskId
			continue
		}
		if f == prefix+"Type" {
			patchee.Type = patcher.Type
			continue
		}
		if f == prefix+"Status" {
			patchee.Status = patcher.Status
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListTransactionPending executes a gorm list call
func DefaultListTransactionPending(ctx context.Context, db *gorm.DB) ([]*TransactionPending, error) {
	in := TransactionPending{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TransactionPendingORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &TransactionPendingORM{}, &TransactionPending{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TransactionPendingORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []TransactionPendingORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TransactionPendingORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*TransactionPending{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type TransactionPendingORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TransactionPendingORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type TransactionPendingORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]TransactionPendingORM) error
}
